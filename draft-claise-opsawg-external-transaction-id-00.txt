



NETMOD                                                         B. Claise
Internet-Draft                                               J. Quilbeuf
Intended status: Standards Track                                  Huawei
Expires: November 19, 2022                                   J. Lindblad
                                                           Cisco Systems
                                                            May 18, 2022


           External Transaction ID for Configuration Changes
             draft-claise-netmod-external-transaction-id-00

Abstract

   Network equipments are often configured by a variety of network
   management systems (NMS), protocols and people.  Each NMS might have
   its own task to perform and these tasks can overlap, leading to two
   different NMS reverting each other modifications on the same network
   equipment.  Also, the configuration pushed by an NMS can be modified
   by an engineer or some protocol.  In turn, this can bring services
   down and de-synchronize NMSs from their managed network equipment.
   We propose a mechanism to map the configuration modifications their
   source, up to the service request in the case of NMSs.  Such a
   mechanism would facilitate the troubleshooting and post mortem
   analysis.  Also, in case of more automated systems, the system could
   automatically identify two conflicting service request, find a
   solution to the conflict and close the loop by sending new
   instructions to the conflicting NMSs.  This document proposes a new
   YANG model to map a local configuration change to corresponding
   northbound and southbound transactions, if any.  In the context of
   NETCONF, with compatible NMS, the model would also contain a
   reference provided by the NMS itself, to map back to the service
   request.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."




Claise, et al.          Expires November 19, 2022               [Page 1]

Internet-Draft           External Transaction ID                May 2022


   This Internet-Draft will expire on November 19, 2022.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  YANG Module . . . . . . . . . . . . . . . . . . . . . . . . .   4
     3.1.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .   5
     3.2.  YANG module ietf-external-transaction-id  . . . . . . . .   5
   4.  Security Considerations . . . . . . . . . . . . . . . . . . .   8
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8
   6.  Contributors  . . . . . . . . . . . . . . . . . . . . . . . .   8
   7.  Open Issues . . . . . . . . . . . . . . . . . . . . . . . . .   8
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   8
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .   8
     8.2.  Informative References  . . . . . . . . . . . . . . . . .   9
   Appendix A.  Changes between revisions  . . . . . . . . . . . . .   9
   Appendix B.  Tracing configuration changes  . . . . . . . . . . .   9
   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  10
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  10

1.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   TODO: define or reuse existing definitions

      client




Claise, et al.          Expires November 19, 2022               [Page 2]

Internet-Draft           External Transaction ID                May 2022


      server

      orchestrator

      controller

      network equipment

      transaction

      transaction id

      commit (configuration), or equivalent

      NMS

2.  Introduction

   This document focuses on cases where the network is configured by
   several NMS that use NETCONF [RFC6241] to update the configuration of
   the device.  For instance, a network service orchestrator might
   receive on its northbound interface a service request to create a new
   service instance, following a service model [RFC8309] described using
   YANG [RFC6020].  The orchestrator will then use NETCONF, as a client,
   to push the configuration needed to create the service.  The
   configured network elements, which act as NETCONF servers, are likely
   to keep track of the modification as part of the commit history.
   However, the only information available about the configuration
   change usually contains is the username of the account that triggered
   the change, the date and the protocol used.  In particular, the
   source of the modification is not available.

   In most cases, there isn't a single NMS configuring all the devices.
   Usually, engineer can log in directly to devices to modify the
   configuration.  Some protocols can also alter the configuration.
   Finally, there are cases where several NMSs are concurrently
   configuring the devices.

   When several NMSs are used to configure the network, the same network
   element or NETCONF server can be configured by different NMSs or
   NETCONF server.  In that case, the configuration or services
   configured by the first client might be impacted by the configuration
   pushed by the second client.  That impact is not always easy to
   detect, especially if the first client is not aware of the
   modification done by the second client and thus is in a correct state
   internally.  Troubleshooting such systems might be involved.  In the
   best case, there is a dedicated user for each client and the
   timestamp of the modification allows to find the reason why the



Claise, et al.          Expires November 19, 2022               [Page 3]

Internet-Draft           External Transaction ID                May 2022


   second client did the modification.  In the worst case, everything is
   done by the same user and some more tricks must be done to identify
   the source of the second modification.

   In order to enable automation, we need to be able to automatically
   detect such conflicts, analyze their cause and automatically
   arbitrate them at a highest level.  While arbitration is outside of
   the scope of this document, finding out why the two NMSs are in
   conflict and possibly finding conflicting service requests is a good
   use case for this document.  This requires mapping the changes seen
   on the devices to changes seen on the NMSs.

   In [I-D.lindblad-netconf-transaction-id], the concept of a NETCONF
   transaction ID is proposed.  The goal of this document is to speed up
   the re-synchronization process between a client and a server, by
   using a common transaction ID.  If the current transaction ID on the
   server is the same as the last one known by the client, then both are
   synchronized.  Else the client can request the diff from the latest
   transaction ID it knows.  In our case, the transaction ID could be
   use to make the link between the changes done on the server and the
   need for these changes.

   Our proposed solution is to store a mapping between the existing
   local commit id and the northbound and southbound transactions
   related to that local configuration change.  The mapping is read only
   and populated by the server at configuration time.

   If the server is configured by an enabled client, then the client
   must send a transaction-ID and its own ID.  The server stores both as
   northbound transaction ID and corresponding client ID.

   If the server has to configure some other servers in response to a
   local configuration change, then it generates a transaction ID, sends
   it along with its ID to the other servers, and saves it as a
   southbound transaction ID.

   The two cases above are not mutually exclusive.  A controller can be
   configured by an Orchestrator and configure network equipment in
   turn.  In that case, both the northbound transaction ID, shared with
   the orchestrator and the southbound transaction ID, shared with the
   network equipments, are stored.  They are both associated to the
   corresponding local configuration commit.

3.  YANG Module

   We present in this section the YANG module for modelling the
   information about the configuration modifications.




Claise, et al.          Expires November 19, 2022               [Page 4]

Internet-Draft           External Transaction ID                May 2022


3.1.  Overview

   The tree representation [RFC8340] of our YANG module is depicted in
   Figure 1

   module: ietf-external-transaction-id
     +--ro external-transactions-id
        +--ro configuration-change* [local-commit-id]
           +--ro local-commit-id              string
           +--ro northbound-transaction-id?   ietf-netconf-txid:etag-t
           +--ro northbound-client-id         string
           +--ro southbound-transaction-id?   ietf-netconf-txid:etag-t


    Figure 1: Tree representation of ietf-external-transaction-id YANG
                                  module

   The local-commit-id represents the local id of the configuration
   changes.  It can be used to retrieve the local configuration changes
   that happened during that transaction.

   The northbound-transaction-id should be present when the server is
   configured by a client supporting the external transaction ID.  In
   that case, the northbound-client-id is mandatory.  The value of both
   fields are sent by the client whenever it sends the configuration
   that trigger the changes associated to the local-commit-id.

   The southbound-transaction-id should be present when the current
   configuration change leads to the configuration of other devices.  In
   that case, the southbound-transaction-id should be generated by the
   server (and unique among other southbound-transaction-id fields
   generated on this server), sent to the configured devices and saved
   in that field.

3.2.  YANG module ietf-external-transaction-id

   <CODE BEGINS> file "ietf-external-transaction-id@2021-11-03.yang"

module ietf-external-transaction-id {
  yang-version 1.1;
  namespace
    "urn:ietf:params:xml:ns:yang:ietf-external-transaction-id";
  prefix ext-txid;

  import ietf-netconf-txid {
    prefix ietf-netconf-txid;
  }




Claise, et al.          Expires November 19, 2022               [Page 5]

Internet-Draft           External Transaction ID                May 2022


  organization
    "IETF OPSAWG Working Group";
  contact
    "WG Web:   <https://datatracker.ietf.org/wg/opsawg/>
     WG List:  <mailto:opsawg@ietf.org>
     Author:   Benoit Claise  <mailto:benoit.claise@huawei.com>
     Author:   Jean Quilbeuf  <mailto:jean.quilbeuf@huawei.com>
     Author:   Jan Linblad    <mailto:jlindbla@cisco.com>";
  description
    "This module enable tracing of configuration changes in an automated
     network. It stores the ID of the northbound transaction when the
     local device is configured by an enabled NMS, and the southbound
     transaction ID when the local device configures other devices.

     The main usage of this module is to map a local configuration
     change to a northbound transaction ID that can be retrieved as
     southbound transaction ID on the configuring NMS, or to map a
     southbound transaction ID to a northbound transaction ID on devices
     that are both configured and configuring other devices.

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',
     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document
     are to be interpreted as described in BCP 14 (RFC 2119)
     (RFC 8174) when, and only when, they appear in all
     capitals, as shown here.

     Copyright (c) 2021 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).
     This version of this YANG module is part of RFC XXXX; see the
     RFC itself for full legal notices.  ";

  revision 2021-11-03 {
    description
      "Initial revision";
    reference
      "RFC xxxx: Title to be completed";
  }

  container external-transactions-id {
    config false;



Claise, et al.          Expires November 19, 2022               [Page 6]

Internet-Draft           External Transaction ID                May 2022


    description
      "Contains the IDs of configuration transactions that are external
       to the current device.";
    list configuration-change {
      key "local-commit-id";
      description
        "List of configuration changes, identified by their
         local-commit-id";
      leaf local-commit-id {
        type string;
        description
          "Id as saved by the server. Can be used to retrieve
           the corresponding changes using the server mechanism
           if available.";
      }
      leaf northbound-transaction-id {
        type ietf-netconf-txid:etag-t;
        description
          "External transaction ID, sent by the client, corresponding
           to a change initiated by a northbound NMS. There should be a
           correspnding entry on the NMS as a southbound-transaction-id
           that maps to the actual configuration commit that triggered
           the configuration of this server.

           This field is present only when the configuration was pushed
           by a compatible system.";
      }
      leaf northbound-client-id {
        when '../northbound-transaction-id';
        type string;
        mandatory true;
        description
          "ID of the client doing the modification, to further query
           information about the corresponding change.";
      }
      leaf southbound-transaction-id {
        type ietf-netconf-txid:etag-t;
        description
          "Transaction ID transmitted to southbound devices configured
           following the configuration change corresponding to
           local-commit-id. ";
      }
    }
  }
}

   <CODE ENDS>




Claise, et al.          Expires November 19, 2022               [Page 7]

Internet-Draft           External Transaction ID                May 2022


4.  Security Considerations

5.  IANA Considerations

   This document includes no request to IANA.

6.  Contributors

7.  Open Issues

      Do we restrict to NETCONF or generalize to any automated
      configuration framework?

      It seems that most problems associated to assigning a
      configuration to a commit are already solved by the current state
      of NETCONF.  We want to make sure that when multiple NMS are
      configuring the same device at the same time, the respective
      configuration pushed by X is saved in the commit associated to X.

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC6020]  Bjorklund, M., Ed., "YANG - A Data Modeling Language for
              the Network Configuration Protocol (NETCONF)", RFC 6020,
              DOI 10.17487/RFC6020, October 2010,
              <https://www.rfc-editor.org/info/rfc6020>.

   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,
              and A. Bierman, Ed., "Network Configuration Protocol
              (NETCONF)", RFC 6241, DOI 10.17487/RFC6241, June 2011,
              <https://www.rfc-editor.org/info/rfc6241>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8340]  Bjorklund, M. and L. Berger, Ed., "YANG Tree Diagrams",
              BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,
              <https://www.rfc-editor.org/info/rfc8340>.






Claise, et al.          Expires November 19, 2022               [Page 8]

Internet-Draft           External Transaction ID                May 2022


8.2.  Informative References

   [I-D.lindblad-netconf-transaction-id]
              Lindblad, J., "Transaction ID Mechanism for NETCONF",
              draft-lindblad-netconf-transaction-id-00 (work in
              progress), November 2020.

   [RFC8199]  Bogdanovic, D., Claise, B., and C. Moberg, "YANG Module
              Classification", RFC 8199, DOI 10.17487/RFC8199, July
              2017, <https://www.rfc-editor.org/info/rfc8199>.

   [RFC8309]  Wu, Q., Liu, W., and A. Farrel, "Service Models
              Explained", RFC 8309, DOI 10.17487/RFC8309, January 2018,
              <https://www.rfc-editor.org/info/rfc8309>.

Appendix A.  Changes between revisions

   Initial version

Appendix B.  Tracing configuration changes

   The model above enables tracing a configuration change in a Network
   Equipment back to its origin, for instance a service request in an
   orchestrator.  To do so, the software doing the tracing should have
   for each NMS ID (as stored in northbound-client-id), access to some
   credentials enabling read access to the model.  It should as well
   have access to the network equipments in which an issue is detected.

   The first step is to identify the commit id that created an issue.
   This step is not defined here, we assume that the software is able to
   identify a commit id.

   The software can match the commit-id with the local-commit-id of our
   model.  If they are no results, or no associated northbound-
   transaction-id, the change was not done by NMS compatible with the
   present draft, and the investigation stops here.

   Otherwise, the software connects to the NMS identified by the
   northbound-client-id.  The software looks for the northbound-
   transaction-id from the previous step in the southbound-transaction-
   id of the NMS.

   From that query, the software knows the local-commit-id on the NMS.
   If the local-commit-id is associated to a northbound-transaction-id,
   the software can iterate the previous step with the NMS identified by
   the northbound-client-id field.





Claise, et al.          Expires November 19, 2022               [Page 9]

Internet-Draft           External Transaction ID                May 2022


   Finally, the local-commit-id points to the changes in topmost NMS
   that eventually triggered the problematic configuration in the
   network equipment.  These changes are now available for further
   manual or automated analysis.

Acknowledgements

   ...

Authors' Addresses

   Benoit Claise
   Huawei

   Email: benoit.claise@huawei.com


   Jean Quilbeuf
   Huawei

   Email: jean.quilbeuf@huawei.com


   Jan Lindblad
   Cisco Systems

   Email: jlindbla@cisco.com
























Claise, et al.          Expires November 19, 2022              [Page 10]
